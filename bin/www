#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lieduoduo-serve:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


server.on('request', function(req,res){
	if(	 req.headers.origin.toLowerCase() === "https://www.lieduoduo.com"
		|| req.headers.origin.toLowerCase() === "http://www.lieduoduo.ziwork.com"
		|| req.headers.origin.toLowerCase() === "https://h5.lieduoduo.com"
		|| req.headers.origin.toLowerCase() === "https://h5.lieduoduo.ziwork.com"
		|| req.headers.origin.toLowerCase() === "https://m.lieduoduo.com"
		|| req.headers.origin.toLowerCase() === "https://m.lieduoduo.ziwork.com"
		) {
		//设置允许跨域的域名，*代表允许任意域名跨域
		res.setHeader("Access-Control-Allow-Origin", req.headers.origin);
	}
	res.setHeader("Access-Control-Allow-Headers", "X-Requested-With");
	res.setHeader("Access-Control-Allow-Methods","PUT,POST,GET,DELETE,OPTIONS");
	res.setHeader("X-Powered-By",' 3.2.1');
	res.setHeader("Content-Type", "text/html"); 
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(req,res) {
	console.log(req, res, 2222222222222)
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
